void GameEngineRenderingPipeLine::Rendering()
{
	// Input Assembler1 가동단계
	// : 원본 Vertex Buffer를 복사한 복제본을 만들어낸다.
	std::vector<float4> CopyVertex;
	CopyVertex = VertexBuffer_->GetVertexs();

	// Vertex Shader 가동단계
	// : 복제본 Vertex Buffer를 이용하여 이동/회전/크기변환 등 기능을 수행한다.
	//   이때 각 기능별 함수를 함수포인터를 이용하여 기능을 호출하여 복제본에 어떠한 
	//   변화를 반영한 뒤 변환된 Vertex Buffer를 받아와서 복제본 VertexBuffer에 저장한다.
	for (size_t i = 0; i < CopyVertex.size(); ++i)
	{
		CopyVertex[i] = VertexShader_->VertexShaderFunction(CopyVertex[i]);
	}

	// Input Assembler2 가동단계
	// : 인덱스 버퍼를 이용하여 면을생성
	std::vector<std::vector<float4>> TriVector;
	const std::vector<int>& Index = IndexBuffer_->Indexs_;

	// 삼각형 면의 개수만큼 resize
	TriVector.resize(Index.size() / 3);
	for (size_t TriCount = 0; TriCount < Index.size() / 3; TriCount++)
	{
		TriVector[TriCount].resize(3);

		int CurIndex0 = Index[(TriCount * 3) + 0];
		int CurIndex1 = Index[(TriCount * 3) + 1];
		int CurIndex2 = Index[(TriCount * 3) + 2];

		TriVector[TriCount][0] = CopyVertex[CurIndex0];
		TriVector[TriCount][1] = CopyVertex[CurIndex1];
		TriVector[TriCount][2] = CopyVertex[CurIndex2];
	}

	// Rasterizer 가동단계
	for (size_t Tri = 0; Tri < TriVector.size(); ++Tri)
	{
		for (size_t i = 0; i < TriVector[Tri].size(); ++i)
		{
			Rasterizer_->RasterizerUpdate(TriVector[Tri][i]);
		}
	}

	// Pixel Shader 가동단계(블렌딩 단계)





	// 화면 렌더링
	for (size_t Tri = 0; Tri < TriVector.size(); Tri++)
	{
		POINT ArrTri[3] = {};

		ArrTri[0] = TriVector[Tri][0].GetWindowPoint();
		ArrTri[1] = TriVector[Tri][1].GetWindowPoint();
		ArrTri[2] = TriVector[Tri][2].GetWindowPoint();

		Polygon(GameEngineWindow::GetInst().GetWindowDC(), &ArrTri[0], 3);
	}
}